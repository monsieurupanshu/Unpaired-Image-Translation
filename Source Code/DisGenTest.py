{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d2c5585",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras_contrib.layers.normalization.instancenormalization import InstanceNormalization \n",
    "from keras.models import load_model\n",
    "from matplotlib import pyplot\n",
    "from numpy.random import randint\n",
    "\n",
    "# select a random sample of images from the dataset\n",
    "def select_sample(dataset, n_samples):\n",
    "\t# choose random instances\n",
    "\tix = randint(0, dataset.shape[0], n_samples)\n",
    "\t# retrieve selected images\n",
    "\tX = dataset[ix]\n",
    "\treturn X\n",
    "\n",
    "# plot the image, its translation, and the reconstruction\n",
    "def show_plot(imagesX, imagesY1, imagesY2):\n",
    "\timages = vstack((imagesX, imagesY1, imagesY2))\n",
    "\ttitles = ['Real', 'Generated', 'Reconstructed']\n",
    "\t# scale from [-1,1] to [0,1]\n",
    "\timages = (images + 1) / 2.0\n",
    "\t# plot images row by row\n",
    "\tfor i in range(len(images)):\n",
    "\t\t# define subplot\n",
    "\t\tpyplot.subplot(1, len(images), 1 + i)\n",
    "\t\t# turn off axis\n",
    "\t\tpyplot.axis('off')\n",
    "\t\t# plot raw pixel data\n",
    "\t\tpyplot.imshow(images[i])\n",
    "\t\t# title\n",
    "\t\tpyplot.title(titles[i])\n",
    "\tpyplot.show()\n",
    "\n",
    "# load dataset\n",
    "A_data = resample(dataA_all, \n",
    "                 replace=False,     \n",
    "                 n_samples=50,    \n",
    "                 random_state=42) # reproducible results\n",
    "\n",
    "B_data = resample(dataB_all, \n",
    "                 replace=False,     \n",
    "                 n_samples=50,    \n",
    "                 random_state=42) # reproducible results\n",
    "\n",
    "A_data = (A_data - 127.5) / 127.5\n",
    "B_data = (B_data - 127.5) / 127.5\n",
    "\n",
    "\n",
    "# load the models\n",
    "cust = {'InstanceNormalization': InstanceNormalization}\n",
    "model_AtoB = load_model('monet2photo_models/g_model_AtoB_005935.h5', cust)\n",
    "model_BtoA = load_model('monet2photo_models/g_model_BtoA_005935.h5', cust)\n",
    "\n",
    "# plot A->B->A (Monet to photo to Monet)\n",
    "A_real = select_sample(A_data, 1)\n",
    "B_generated  = model_AtoB.predict(A_real)\n",
    "A_reconstructed = model_BtoA.predict(B_generated)\n",
    "show_plot(A_real, B_generated, A_reconstructed)\n",
    "# plot B->A->B (Photo to Monet to Photo)\n",
    "B_real = select_sample(B_data, 1)\n",
    "A_generated  = model_BtoA.predict(B_real)\n",
    "B_reconstructed = model_AtoB.predict(A_generated)\n",
    "show_plot(B_real, A_generated, B_reconstructed)\n",
    "\n",
    "##########################\n",
    "#Load a single custom image\n",
    "test_image = load_img('monet2photo/sunset256.jpg')\n",
    "test_image = img_to_array(test_image)\n",
    "test_image_input = np.array([test_image])  # Convert single image to a batch.\n",
    "test_image_input = (test_image_input - 127.5) / 127.5\n",
    "\n",
    "# plot B->A->B (Photo to Monet to Photo)\n",
    "monet_generated  = model_BtoA.predict(test_image_input)\n",
    "photo_reconstructed = model_AtoB.predict(monet_generated)\n",
    "show_plot(test_image_input, monet_generated, photo_reconstructed)'''"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
